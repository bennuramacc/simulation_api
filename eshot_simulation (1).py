# -*- coding: utf-8 -*-
"""eshot_simulation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aAKQUwNns-7l24zlWkSdxb9nZJlEwHiq
"""

!pip install -q simpy catboost openpyxl pandas numpy matplotlib

import simpy
import pandas as pd
import numpy as np
import random
import datetime as dt
from dataclasses import dataclass, field
from catboost import CatBoostRegressor
import re

# ─── GLOBAL LOG ──────────────────────────────────────────────────────
LOG = []

# ─── DOSYA YOLLARI ───────────────────────────────────────────────────
XL_TRAVEL   = "Travel Times & Dwell Times.xlsx"
ARRIVAL_XLS = "passenger_arrival_rates_by_stop.xlsx"
DEST_PATH   = "DestinationProbabilities_Corrected.xlsx"
CBM_PATH    = "segment_model.cbm"

# ─── 1) Travel + Dwell Tablosu ───────────────────────────────────────
def build_stops():
    df = pd.read_excel(XL_TRAVEL, sheet_name=0, header=1)
    df = df.loc[:, ~df.columns.str.contains("Unnamed")]
    df.columns = [c.strip() for c in df.columns]
    trav = df[["From","To","KM","Duration (sec)"]].rename(
        columns={"From":"stop","To":"next","KM":"km","Duration (sec)":"travel_min"})
    dcol = [c for c in df.columns if c.endswith("(sec).1")][0]
    dwell = df[["Station", dcol]].rename(
        columns={"Station":"stop", dcol:"dwell_sec"})
    return trav.merge(dwell, on="stop").dropna().reset_index(drop=True)

SEG_DF = build_stops()

# ─── 2) Arrival Rates (her durak kendi sheet’te) ─────────────────────
arrival_sheets = pd.read_excel(ARRIVAL_XLS, sheet_name=None)
time_re = re.compile(r"^\d{2}:\d{2}-\d{2}:\d{2}$")
ARRIVAL_MAP = {}
for name, df in arrival_sheets.items():
    df = df.set_index(df.columns[0])
    cols = [c for c in df.columns if time_re.match(c)]
    ARRIVAL_MAP[name] = df[cols]

day_map = {"Monday":"Pazartesi","Tuesday":"Salı","Wednesday":"Çarşamba",
           "Thursday":"Perşembe","Friday":"Cuma","Saturday":"Cumartesi","Sunday":"Pazar"}
ARRIVAL_SCALE = 600

def get_stop_lambda(stop, now):
    df = ARRIVAL_MAP.get(stop)
    if df is None: return 0.0
    day = day_map[now.strftime("%A")]
    if day not in df.index: return 0.0
    row = df.loc[day]
    m   = now.hour*60 + now.minute
    for col,val in row.items():
        s,e = col.split("-")
        smin = int(s[:2])*60 + int(s[3:])
        emin = int(e[:2])*60 + int(e[3:])
        if (smin<=m<emin) or (smin>emin and (m>=smin or m<emin)):
            return float(val)
    return float(row.iloc[-1])

# ─── 3) Beklenen Load Hesabı ─────────────────────────────────────────
def estimate_expected_load(dep, sc):
    now = dep
    tot = 0.0
    for r in SEG_DF.itertuples():
        lam = get_stop_lambda(r.stop, now) * ARRIVAL_SCALE * sc.demand_multiplier
        tot += lam * (r.travel_min/60)
        # ilerleme: travel süresi kadar
        now += dt.timedelta(minutes=r.travel_min)
    return tot

# ─── 4) Destination Probabilities ───────────────────────────────────
dp_raw = pd.read_excel(DEST_PATH, sheet_name=0, index_col=0)
dp     = dp_raw.div(dp_raw.sum(axis=1),axis=0).fillna(0)
DEST_MAP = {o:(dp.columns.tolist(), dp.loc[o].tolist()) for o in dp.index}

# ─── 5) CatBoost ve Özellikler ──────────────────────────────────────
CAT = CatBoostRegressor(); CAT.load_model(CBM_PATH)
FEATS = [
 'weather_temp','HOUR',
 'DAY_OF_WEEK_1','DAY_OF_WEEK_2','DAY_OF_WEEK_3',
 'DAY_OF_WEEK_4','DAY_OF_WEEK_5','DAY_OF_WEEK_6',
 'HOLIDAY_CATEGORY_Normal','HOLIDAY_CATEGORY_Holiday',
 'MONTH_2','MONTH_3','MONTH_4','MONTH_5','MONTH_6',
 'MONTH_7','MONTH_8','MONTH_9','MONTH_10','MONTH_11','MONTH_12',
 'PANDEMIC_CONDITION_Pandemic','SCHOOL_STATUS_School Open',
 'weather_description_Cloudy','weather_description_Low Visibility',
 'weather_description_Precipitation','weather_description_Storm',
 'HATSURESI_LAG_1','HATSURESI_LAG_2','HATSURESI_LAG_3',
 'HATSURESI_LAG_4','HATSURESI_LAG_5'
]

def make_features(now, sc, km, lags):
    f = {k:0 for k in FEATS}
    f["HOUR"] = now.hour
    f["weather_temp"] = sc.temp
    f[f"DAY_OF_WEEK_{now.weekday()+1}"] = 1
    if 2 <= now.month <= 12:
        f[f"MONTH_{now.month}"] = 1
    f["HOLIDAY_CATEGORY_Holiday"] = int(sc.is_public_holiday)
    f["HOLIDAY_CATEGORY_Normal"]  = int(not sc.is_public_holiday)
    f["SCHOOL_STATUS_School Open"]   = int(sc.is_school_day)
    f["PANDEMIC_CONDITION_Pandemic"] = int(sc.is_pandemic)
    wd = f"weather_description_{sc.weather_desc}"
    if wd in f: f[wd] = 1
    lags = (lags + [0]*5)[:5]
    for i,v in enumerate(lags,1):
        f[f"HATSURESI_LAG_{i}"] = v
    return [f[k] for k in FEATS]

# ─── 6) Scenario & BusType ──────────────────────────────────────────
@dataclass(frozen=True)
class BusType:
    name: str
    capacity: int
STD, ARTIC = BusType("Standard",90), BusType("Körüklü",120)

@dataclass
class Scenario:
    weather_desc: str
    temp: float
    demand_multiplier: float
    is_school_day: bool
    is_public_holiday: bool
    is_pandemic: bool = False
    bus_type: BusType = field(default_factory=lambda:STD)

CURRENT_THR = 90
HOUR_FACTOR = {h:1.0 for h in range(24)}
HOUR_FACTOR.update({7:1.4,8:1.6,17:1.5,18:1.3})

# ─── 7) Otobüs Süreci ───────────────────────────────────────────────
class Bus:
    def __init__(self,env,name,dep,sc):
        self.e,self.name,self.dep,self.sc = env,name,dep,sc
        self.curr = dep
        self.seg  = SEG_DF.copy()    # << kesinlikle burada
        self.pax  = []
        self.max_occ = 0
        env.process(self.run())

    def run(self):
        # kalkış gecikmesi
        start = (self.dep - dt.datetime.combine(self.dep.date(),dt.time())).seconds/60
        yield self.e.timeout(start)

        lags,trip = [0]*5,0
        for r in self.seg.itertuples():
            now,stop,km = self.curr,r.stop,r.km

            # travel süresi (CatBoost)
            feat = make_features(now,self.sc,km,lags)
            sec  = float(CAT.predict([feat])[0])
            dur  = sec/60
            # fırtına/yağış etkisi
            if self.sc.weather_desc in ("Storm","Precipitation"):
                dur *= 1.1
            lags = [dur] + lags[:4]
            trip += dur
            yield self.e.timeout(dur)
            self.curr += dt.timedelta(minutes=dur)

            # inen yolcular
            out = [p for p in self.pax if p==stop]
            self.pax = [p for p in self.pax if p!=stop]

            # binen yolcular
            lam = get_stop_lambda(stop,now)*ARRIVAL_SCALE*self.sc.demand_multiplier
            if self.sc.is_public_holiday: lam *= 0.8
            nin = np.random.poisson(lam*dur)
            dests,probs = DEST_MAP.get(stop,([],[]))
            new = (np.random.choice(dests,size=nin,p=probs).tolist() if dests else [stop]*nin)
            self.pax.extend(new)

            # occupancy
            self.max_occ = max(self.max_occ,len(self.pax))

            # dwell süresi
            dwell = (r.dwell_sec/60) + len(out)*0.03 + nin*0.01
            if self.sc.is_school_day:    dwell *= 1.1
            if self.sc.is_public_holiday: dwell *= 1.2
            trip += dwell
            yield self.e.timeout(dwell)
            self.curr += dt.timedelta(minutes=dwell)

        LOG.append({
            "trip":      self.name,
            "trip_time": round(trip,2),
            "capacity":  self.sc.bus_type.capacity,
            "max_occ":   self.max_occ
        })

# ─── 8) run_day ─────────────────────────────────────────────────────
def choose_bus(load):
    return ARTIC if load > CURRENT_THR else STD

def run_day(sc,slot_plan,date=None):
    global LOG
    LOG = []  # global LOG'u sıfırla
    date = date or dt.date.today()
    env  = simpy.Environment()
    for k,(s,_) in enumerate(slot_plan):
        dep = dt.datetime.combine(date,pd.to_datetime(s).time())
        exp = estimate_expected_load(dep,sc)
        sc.bus_type = choose_bus(exp)
        Bus(env,f"Trip{k}",dep,sc)
    env.run()
    return pd.DataFrame(LOG)

# ─── 9) Örnek çalıştır + KPI + Grafik ──────────────────────────────
SLOT = [("06:00",10),("09:00",15),("16:00",10),("20:00",20),("01:00",None)]
sc   = Scenario("Rain",16.0,1.3,True, False)

# Threshold → Avg load factor
print("Threshold → Avg load factor")
for t in range(70,121,10):
    CURRENT_THR = t
    df = run_day(sc,SLOT)
    print(f"{t:>3} → {(df['max_occ']/df['capacity']).mean():.2%}")
best = min(range(70,121,10),
           key=lambda t:(run_day(sc,SLOT)['max_occ']/run_day(sc,SLOT)['capacity']).mean())
print("En iyi eşik:", best)

df = run_day(sc,SLOT)
trip = df.groupby("trip").agg(time_min=("trip_time","first"),
                              cap=("capacity","first"),
                              max_occ=("max_occ","first"))
trip["load_%"] = 100*trip["max_occ"]/trip["cap"]
display(trip)

import matplotlib.pyplot as plt
fig,ax1 = plt.subplots(figsize=(6,3))
trip["time_min"].plot(ax=ax1,title="Sefer Süreleri"); ax1.set_ylabel("dk")
ax2=ax1.twinx(); trip["load_%"].plot(ax=ax2,
                                      color="orange",linestyle="--")
ax2.set_ylabel("Yük Faktörü (%)"); plt.tight_layout(); plt.show()

from fastapi import FastAPI
from pydantic import BaseModel
import pandas as pd, simpy, datetime as dt
# … diğer importlar …

app = FastAPI()

class SimRequest(BaseModel):
    weather_desc: str
    temp: float
    demand_multiplier: float
    is_school_day: bool
    is_public_holiday: bool
    is_pandemic: bool = False
    threshold: int
    slots: list[list[str]]    # ← conlist yerine düz liste kullandık

@app.post("/simulate")
def simulate(req: SimRequest):
    global CURRENT_THR
    CURRENT_THR = req.threshold
    sc = Scenario(
        weather_desc      = req.weather_desc,
        temp              = req.temp,
        demand_multiplier = req.demand_multiplier,
        is_school_day     = req.is_school_day,
        is_public_holiday = req.is_public_holiday,
        is_pandemic       = req.is_pandemic
    )
    # [["06:00","10"], …] → [(s, int(h) if h else None), …]
    slot_plan = [(s, int(h) if h else None) for s,h in req.slots]

    df = run_day(sc, slot_plan)
    df_trip = (
      df.groupby("trip")
        .agg(time_min=("trip_time","first"),
             cap=("capacity","first"),
             max_occ=("max_occ","first"))
    )
    df_trip["load_%"] = 100 * df_trip["max_occ"] / df_trip["cap"]
    return df_trip.reset_index().to_dict(orient="records")

from fastapi.middleware.cors import CORSMiddleware

app = FastAPI()
app.add_middleware(
  CORSMiddleware,
  allow_origins=["*"],
  allow_methods=["*"],
  allow_headers=["*"],
)

@app.post("/simulate")
def simulate(req: SimRequest):
    # … burada simülasyon modelleri çalışıyor
    return result